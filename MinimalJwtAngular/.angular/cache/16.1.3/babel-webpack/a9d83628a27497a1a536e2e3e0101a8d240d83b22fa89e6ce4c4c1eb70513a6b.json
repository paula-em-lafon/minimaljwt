{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nconst USER_KEY = 'currentuser';\nconst ROLE = 'role';\nconst REFRESH_TOKEN = 'refreshToken';\nexport class StorageService {\n  constructor(cookieService) {\n    this.cookieService = cookieService;\n    this.isLoggedIn = new BehaviorSubject(this.isLoggedInfunc()); // initial value is \"userdoc is not ready\"\n  }\n\n  clean() {\n    window.sessionStorage.clear();\n    this.cookieService.delete('Authorization');\n  }\n  saveUser(user) {\n    this.cookieService.delete('Authorization');\n    this.cookieService.set('Authorization', user.token);\n    delete user.token;\n    window.localStorage.removeItem(REFRESH_TOKEN);\n    window.localStorage.setItem(REFRESH_TOKEN, user.refreshToken);\n    delete user.refreshToken;\n    window.localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n  getUser() {\n    const user = window.sessionStorage.getItem(USER_KEY);\n    if (user) {\n      return JSON.parse(user);\n    }\n    return {};\n  }\n  isLoggedInfunc() {\n    const user = this.cookieService.get('Authorization');\n    if (user) {\n      return true;\n    }\n    return false;\n  }\n  getRefreshToken() {\n    const user = window.sessionStorage.getItem(REFRESH_TOKEN);\n    if (user) {\n      return user;\n    }\n    return null;\n  }\n  getToken() {\n    const token = this.cookieService.get('Authorization');\n    if (token) {\n      return token;\n    }\n    return null;\n  }\n  setValueLoggedIn(value) {\n    this.valueSubject.next(value);\n  }\n  getValueLoggedIn() {\n    return this.valueSubject.asObservable();\n  }\n}\nStorageService.ɵfac = function StorageService_Factory(t) {\n  return new (t || StorageService)(i0.ɵɵinject(i1.CookieService));\n};\nStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StorageService,\n  factory: StorageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","USER_KEY","ROLE","REFRESH_TOKEN","StorageService","constructor","cookieService","isLoggedIn","isLoggedInfunc","clean","window","sessionStorage","clear","delete","saveUser","user","set","token","localStorage","removeItem","setItem","refreshToken","JSON","stringify","getUser","getItem","parse","get","getRefreshToken","getToken","setValueLoggedIn","value","valueSubject","next","getValueLoggedIn","asObservable","i0","ɵɵinject","i1","CookieService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\paula.lafon\\projects\\learning\\learndotnet\\webapp\\examples\\MinimalJwtAngular\\src\\app\\services\\storage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { of, Observable, BehaviorSubject } from 'rxjs';\n\nconst USER_KEY= 'currentuser';\nconst ROLE = 'role';\nconst REFRESH_TOKEN = 'refreshToken';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  private isLoggedIn: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(this.isLoggedInfunc()); // initial value is \"userdoc is not ready\"\n    valueSubject: any;\r\n  constructor(private cookieService: CookieService) { }\n\n  clean(): void {\n    window.sessionStorage.clear();\n    this.cookieService.delete('Authorization');\n  }\n\n  public saveUser(user: any): void {\n    this.cookieService.delete('Authorization')\n    this.cookieService.set('Authorization', user.token);\n    delete user.token;\n    window.localStorage.removeItem(REFRESH_TOKEN);\n    window.localStorage.setItem(REFRESH_TOKEN, user.refreshToken);\n    delete user.refreshToken;\n    window.localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n\n\n\n  public getUser(): any {\n    const user = window.sessionStorage.getItem(USER_KEY);\n    if (user) {\n      return JSON.parse(user);\n    }\n\n    return {};\n  }\n\n  public isLoggedInfunc(): boolean {\n    const user = this.cookieService.get('Authorization');\n    if (user) {\n      return true;\n    }\n\n    return false;\n  }\n\n  public getRefreshToken(): any {\n    const user = window.sessionStorage.getItem(REFRESH_TOKEN);\n    if (user) {\n      return user;\n    }\n\n    return null;\n  }\n\n  public getToken(): any {\n    const token = this.cookieService.get('Authorization')\r\n    if (token) {\n      return token;\r\n    }\n    return null;\n  }\n\n  setValueLoggedIn(value: boolean) {\n    this.valueSubject.next(value);\n  }\n\n  getValueLoggedIn() {\r\n    return this.valueSubject.asObservable();\r\n  }\n}\n"],"mappings":"AAEA,SAAyBA,eAAe,QAAQ,MAAM;;;AAEtD,MAAMC,QAAQ,GAAE,aAAa;AAC7B,MAAMC,IAAI,GAAG,MAAM;AACnB,MAAMC,aAAa,GAAG,cAAc;AAMpC,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IAFzB,KAAAC,UAAU,GAA6B,IAAIP,eAAe,CAAU,IAAI,CAACQ,cAAc,EAAE,CAAC,CAAC,CAAC;EAEhD;;EAEpDC,KAAKA,CAAA;IACHC,MAAM,CAACC,cAAc,CAACC,KAAK,EAAE;IAC7B,IAAI,CAACN,aAAa,CAACO,MAAM,CAAC,eAAe,CAAC;EAC5C;EAEOC,QAAQA,CAACC,IAAS;IACvB,IAAI,CAACT,aAAa,CAACO,MAAM,CAAC,eAAe,CAAC;IAC1C,IAAI,CAACP,aAAa,CAACU,GAAG,CAAC,eAAe,EAAED,IAAI,CAACE,KAAK,CAAC;IACnD,OAAOF,IAAI,CAACE,KAAK;IACjBP,MAAM,CAACQ,YAAY,CAACC,UAAU,CAAChB,aAAa,CAAC;IAC7CO,MAAM,CAACQ,YAAY,CAACE,OAAO,CAACjB,aAAa,EAAEY,IAAI,CAACM,YAAY,CAAC;IAC7D,OAAON,IAAI,CAACM,YAAY;IACxBX,MAAM,CAACQ,YAAY,CAACE,OAAO,CAACnB,QAAQ,EAAEqB,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC,CAAC;EAC7D;EAIOS,OAAOA,CAAA;IACZ,MAAMT,IAAI,GAAGL,MAAM,CAACC,cAAc,CAACc,OAAO,CAACxB,QAAQ,CAAC;IACpD,IAAIc,IAAI,EAAE;MACR,OAAOO,IAAI,CAACI,KAAK,CAACX,IAAI,CAAC;;IAGzB,OAAO,EAAE;EACX;EAEOP,cAAcA,CAAA;IACnB,MAAMO,IAAI,GAAG,IAAI,CAACT,aAAa,CAACqB,GAAG,CAAC,eAAe,CAAC;IACpD,IAAIZ,IAAI,EAAE;MACR,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd;EAEOa,eAAeA,CAAA;IACpB,MAAMb,IAAI,GAAGL,MAAM,CAACC,cAAc,CAACc,OAAO,CAACtB,aAAa,CAAC;IACzD,IAAIY,IAAI,EAAE;MACR,OAAOA,IAAI;;IAGb,OAAO,IAAI;EACb;EAEOc,QAAQA,CAAA;IACb,MAAMZ,KAAK,GAAG,IAAI,CAACX,aAAa,CAACqB,GAAG,CAAC,eAAe,CAAC;IACrD,IAAIV,KAAK,EAAE;MACT,OAAOA,KAAK;;IAEd,OAAO,IAAI;EACb;EAEAa,gBAAgBA,CAACC,KAAc;IAC7B,IAAI,CAACC,YAAY,CAACC,IAAI,CAACF,KAAK,CAAC;EAC/B;EAEAG,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACF,YAAY,CAACG,YAAY,EAAE;EACzC;;AAhEW/B,cAAc,C;mBAAdA,cAAc,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA;AAAA;AAAdnC,cAAc,C;SAAdA,cAAc;EAAAoC,OAAA,EAAdpC,cAAc,CAAAqC,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}