{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./storage.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthguardService {\n  constructor(storage, router) {\n    this.storage = storage;\n    this.router = router;\n  }\n  canActivate() {\n    console.log('somethings up');\n    console.log(this.storage.isLoggedInfunc());\n    if (!this.storage.isLoggedInfunc()) {\n      if (!this.storage.getToken()) {\n        console.log('this');\n        this.router.navigate(['needlogin']);\n        return false;\n      } else {\n        this.router.navigate(['needlogin']);\n        return false;\n      }\n    }\n    return true;\n  }\n}\nAuthguardService.ɵfac = function AuthguardService_Factory(t) {\n  return new (t || AuthguardService)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.Router));\n};\nAuthguardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthguardService,\n  factory: AuthguardService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthguardService","constructor","storage","router","canActivate","console","log","isLoggedInfunc","getToken","navigate","i0","ɵɵinject","i1","StorageService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\paula.lafon\\projects\\learning\\learndotnet\\webapp\\examples\\MinimalJwtAngular\\src\\app\\services\\authguard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { StorageService } from './storage.service';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthguardService {\n\n  constructor(public storage: StorageService, public router: Router) { }\n\n  canActivate(): boolean {\n    console.log('somethings up')\n    console.log(this.storage.isLoggedInfunc())\n    if (!this.storage.isLoggedInfunc()) {\n      if (!this.storage.getToken()) {\n        console.log('this')\n        this.router.navigate(['needlogin']);\n        return false;\n      }\n      else {\n        this.router.navigate(['needlogin']);\r\n        return false\r\n      }\n    }\n    return true;\n  }\n}\n"],"mappings":";;;AAQA,OAAM,MAAOA,gBAAgB;EAE3BC,YAAmBC,OAAuB,EAASC,MAAc;IAA9C,KAAAD,OAAO,GAAPA,OAAO;IAAyB,KAAAC,MAAM,GAANA,MAAM;EAAY;EAErEC,WAAWA,CAAA;IACTC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5BD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,OAAO,CAACK,cAAc,EAAE,CAAC;IAC1C,IAAI,CAAC,IAAI,CAACL,OAAO,CAACK,cAAc,EAAE,EAAE;MAClC,IAAI,CAAC,IAAI,CAACL,OAAO,CAACM,QAAQ,EAAE,EAAE;QAC5BH,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;QACnB,IAAI,CAACH,MAAM,CAACM,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;QACnC,OAAO,KAAK;OACb,MACI;QACH,IAAI,CAACN,MAAM,CAACM,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;QACnC,OAAO,KAAK;;;IAGhB,OAAO,IAAI;EACb;;AAnBWT,gBAAgB,C;mBAAhBA,gBAAgB,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAhBf,gBAAgB,C;SAAhBA,gBAAgB;EAAAgB,OAAA,EAAhBhB,gBAAgB,CAAAiB,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}