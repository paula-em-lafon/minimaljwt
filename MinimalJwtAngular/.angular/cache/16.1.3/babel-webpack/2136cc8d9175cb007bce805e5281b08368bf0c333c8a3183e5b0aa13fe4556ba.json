{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/paula.lafon/projects/learning/learndotnet/webapp/examples/MinimalJwtAngular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./storage.service\";\nexport class AuthService {\n  constructor(http, storageService) {\n    this.http = http;\n    this.storageService = storageService;\n    this.userApiUrl = 'https://localhost:7113';\n  }\n  tryRefreshingTokens() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const token = _this.storageService.getToken();\n      const refreshToken = _this.storageService.getRefreshToken();\n      console.log(\"Inside refresh token function\");\n      console.log(refreshToken);\n      if (!token || !refreshToken) {\n        return false;\n      }\n      const credentials = JSON.stringify({\n        refreshToken: refreshToken\n      });\n      let isRefreshSuccess;\n      const refreshRes = yield new Promise((resolve, reject) => {\n        _this.http.post(_this.userApiUrl + \"/refreshToken\", credentials, {\n          withCredentials: true\n        }).subscribe({\n          next: res => resolve(res),\n          error: _ => {\n            reject;\n            isRefreshSuccess = false;\n          }\n        });\n      });\n      _this.storageService.saveUser(refreshRes);\n      isRefreshSuccess = true;\n      return isRefreshSuccess;\n    })();\n  }\n  login(username, password) {\n    return this.http.post(this.userApiUrl + '/login', {\n      username,\n      password\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthService","constructor","http","storageService","userApiUrl","tryRefreshingTokens","_this","_asyncToGenerator","token","getToken","refreshToken","getRefreshToken","console","log","credentials","JSON","stringify","isRefreshSuccess","refreshRes","Promise","resolve","reject","post","withCredentials","subscribe","next","res","error","_","saveUser","login","username","password","i0","ɵɵinject","i1","HttpClient","i2","StorageService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\paula.lafon\\projects\\learning\\learndotnet\\webapp\\examples\\MinimalJwtAngular\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { StorageService } from './storage.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n\r\n  private userApiUrl = 'https://localhost:7113';\r\n\r\n  constructor(private http: HttpClient, private storageService: StorageService) { }\r\n\r\n  async tryRefreshingTokens(): Promise<boolean> {\r\n\r\n    const token: any = this.storageService.getToken();\r\n    const refreshToken: any = this.storageService.getRefreshToken();\r\n    console.log(\"Inside refresh token function\");\r\n    console.log(refreshToken);\r\n    if (!token || !refreshToken) {\r\n      return false;\r\n    }\r\n\r\n    const credentials = JSON.stringify({ refreshToken: refreshToken });\r\n    let isRefreshSuccess: boolean;\r\n    \r\n    const refreshRes = await new Promise<any>((resolve, reject) => {\r\n      this.http.post<any>(this.userApiUrl +\"/refreshToken\", credentials, {\r\n        withCredentials: true\r\n      }).subscribe({\r\n        next: (res: any) => resolve(res),\r\n        error: (_) => { reject; isRefreshSuccess = false; }\r\n      });\r\n    });\r\n    this.storageService.saveUser(refreshRes);\r\n    isRefreshSuccess = true;\r\n    return isRefreshSuccess;\r\n  }\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.post(\r\n      this.userApiUrl + '/login',\r\n      {\r\n        username,\r\n        password\r\n      },\r\n      \r\n    )\r\n  }\r\n}\r\n"],"mappings":";;;;AAUA,OAAM,MAAOA,WAAW;EAKtBC,YAAoBC,IAAgB,EAAUC,cAA8B;IAAxD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,cAAc,GAAdA,cAAc;IAFpD,KAAAC,UAAU,GAAG,wBAAwB;EAEmC;EAE1EC,mBAAmBA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAEvB,MAAMC,KAAK,GAAQF,KAAI,CAACH,cAAc,CAACM,QAAQ,EAAE;MACjD,MAAMC,YAAY,GAAQJ,KAAI,CAACH,cAAc,CAACQ,eAAe,EAAE;MAC/DC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5CD,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;MACzB,IAAI,CAACF,KAAK,IAAI,CAACE,YAAY,EAAE;QAC3B,OAAO,KAAK;;MAGd,MAAMI,WAAW,GAAGC,IAAI,CAACC,SAAS,CAAC;QAAEN,YAAY,EAAEA;MAAY,CAAE,CAAC;MAClE,IAAIO,gBAAyB;MAE7B,MAAMC,UAAU,SAAS,IAAIC,OAAO,CAAM,CAACC,OAAO,EAAEC,MAAM,KAAI;QAC5Df,KAAI,CAACJ,IAAI,CAACoB,IAAI,CAAMhB,KAAI,CAACF,UAAU,GAAE,eAAe,EAAEU,WAAW,EAAE;UACjES,eAAe,EAAE;SAClB,CAAC,CAACC,SAAS,CAAC;UACXC,IAAI,EAAGC,GAAQ,IAAKN,OAAO,CAACM,GAAG,CAAC;UAChCC,KAAK,EAAGC,CAAC,IAAI;YAAGP,MAAM;YAAEJ,gBAAgB,GAAG,KAAK;UAAE;SACnD,CAAC;MACJ,CAAC,CAAC;MACFX,KAAI,CAACH,cAAc,CAAC0B,QAAQ,CAACX,UAAU,CAAC;MACxCD,gBAAgB,GAAG,IAAI;MACvB,OAAOA,gBAAgB;IAAC;EAC1B;EAEAa,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAAC9B,IAAI,CAACoB,IAAI,CACnB,IAAI,CAAClB,UAAU,GAAG,QAAQ,EAC1B;MACE2B,QAAQ;MACRC;KACD,CAEF;EACH;;AA1CWhC,WAAW,C;mBAAXA,WAAW,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;AAAA;AAAXtC,WAAW,C;SAAXA,WAAW;EAAAuC,OAAA,EAAXvC,WAAW,CAAAwC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}